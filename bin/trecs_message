#!/usr/bin/env ruby

$:.unshift(File.expand_path("../../lib", __FILE__))

require "trollop"
require "timestamps"
require "zip"

module TRecs
  class MessageRecorder
    include FileUtils

    def initialize(options={})
      @file_name = options.fetch(:file_name)
      @message   = options.fetch(:message)

      delete_file
    end

    def record
      create_recording(file_name) do |trecs_file|
        message.each_char.each_with_object("") do |current_char, current_msg|
          current_msg << current_char
          create_frame(current_msg,
                       generate_timestamp_for(current_msg),
                       trecs_file)

        end
      end
    end

    private
    attr_reader :file_name, :message

    def delete_file
      rm file_name if File.exists? file_name
    end

    def create_recording(file_name)
      Zip::File.open(file_name, Zip::File::CREATE) do |trecs_file|
        yield trecs_file
      end
    end

    def generate_timestamp_for(message)
      ((message.size - 1) * 100).to_s
    end

    def create_frame(current_message, timestamp, trecs_file)
      Tempfile.open(timestamp) do |temp_file|
        temp_file.write(current_message)
        trecs_file.add(timestamp, temp_file)
      end
    end
  end
end
#-------------------------

options = Trollop::options do
  opt :file_name, "File to process",   short: 'f', type: String
  opt :message,   "Message to record", short: 'm', type: String
end

if options[:file_name]
  recorder = TRecs::MessageRecorder.new(options)
  recorder.record
else
  puts "Please give a file name"
end
#recorder = TRecs::MessageRecorder.new(options)
