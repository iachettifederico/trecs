#!/usr/bin/env ruby

$:.unshift(File.expand_path("../../lib", __FILE__))
require "trecs"
require "recorder"
require "trollop"


opts = Trollop::options do
  version TRecs::VERSION

  opt :step, "Time in ms between frames", short: 's', default: 100
  opt :format, "File format", type: String, default: "yaml_store"
  opt :strategy, "Strategy", type: String, default: "incremental"

  opt :message, "Message to record", type: String, default: "TRecs!"
  opt :input_file, "File to record", type: String, default: ""
  opt :terminal, "Launch terminal",                default: true

end
opts[:trecs_file] = ARGV[0]

writer_file = "writers/#{opts[:format]}_writer"
require writer_file
writer_class = Kernel.const_get([
    "TRecs::",
    opts[:format].split(/[-_\s]/).map(&:capitalize),
    "Writer"
  ].join
  )


strategy_file = "recording_strategies/#{opts[:strategy]}_strategy"
require strategy_file
strategy_class = Kernel.const_get([
    "TRecs::",
    opts[:strategy].split(/[-_\s]/).map(&:capitalize),
    "Strategy"
  ].join
  )



puts "Recording ..."

if strategy_class.to_s == "TRecs::TtyrecStrategy"
  opts[:height], opts[:width] = `stty size`.split(" ").map(&:to_i)
  system "ttyrec #{opts[:input_file]}" if opts[:terminal]
end

recorder_options = {
  writer: writer_class.new(opts),
  strategy: strategy_class.new(opts),
  step:   opts[:step],
}


RECORDER = TRecs::Recorder.new(recorder_options)

trap "SIGINT" do
  RECORDER.stop
end

RECORDER.record

puts "Recording finished"
puts "Play with:"
puts "  bin/trecs #{opts[:trecs_file]}"
