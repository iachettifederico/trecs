#!/usr/bin/env ruby

$:.unshift(File.expand_path("../../lib", __FILE__))
require "trecs"
require "recorder"
require "trollop"


opts = Trollop::options do
  version TRecs::VERSION

  opt :step, "Time in ms between frames", short: 's',                default: 100
  opt :format, "File format",                         type: String,  default: "json"
  opt :strategy, "Strategy",                          type: String,  default: "incremental"

  opt :message, "Message to record",                  type: String,  default: "TRecs!"
  opt :width, "Width",                                type: Integer, default: 10
  opt :command, "Command"          ,      short: "c", type: String
  opt :input_file, "File to record",                  type: String,  default: ""
  opt :terminal, "Launch terminal",                                  default: true
  opt :color, "Record colors",                                       default: true

  opt :audio, "Record audio",                         type: String

end
opts[:trecs_file] = ARGV[0]

writer_file = "writers/#{opts[:format]}_writer"
require writer_file
writer_class = Kernel.const_get([
    "TRecs::",
    opts[:format].split(/[-_\s]/).map(&:capitalize),
    "Writer"
  ].join
  )


strategy_file = "recording_strategies/#{opts[:strategy]}_strategy"
require strategy_file
strategy_class = Kernel.const_get([
    "TRecs::",
    opts[:strategy].split(/[-_\s]/).map(&:capitalize),
    "Strategy"
  ].join
  )

########## AUDIO ##########
def start_sound_recording(file_name='sound.ogg')
  puts "Sound file stored in #{file_name}"
  @sox_pid = fork do
    Signal.trap("SIGINT") {
      puts "=> Sound recording finished!"
      exit
    }
    sleep 0.5
    `rec -C 1 --channels 1 --rate 16k --comment 'TRecs' #{file_name} 2>&1`
  end
end

def stop_sound_recording
  puts "=> Stopping sound recorder"
  sleep 2 # otherwise record will be cropped for some reason
  Process.kill("SIGINT", @sox_pid)
  Process.waitpid(@sox_pid)
end

######## END AUDIO ########

if strategy_class.to_s == "TRecs::TmuxSessionStrategy" && !ENV['TMUX']
  puts "You need to be inside a tmux session to use the Tmux Session Strategy"
  exit(0)
end

puts "Recording ..."

if strategy_class.to_s == "TRecs::TtyrecStrategy"
  opts[:height], opts[:width] = `stty size`.split(" ").map(&:to_i)
  opts[:audio] && start_sound_recording(opts[:audio])
  system "ttyrec #{opts[:input_file]}" if opts[:terminal]
end

recorder_options = {
  writer:   writer_class.new(opts),
  strategy: strategy_class.new(opts),
  step:     opts[:step],
}

opts[:audio] && stop_sound_recording
RECORDER = TRecs::Recorder.new(recorder_options)

trap "SIGINT" do
  RECORDER.stop
end

RECORDER.record

puts "Recording finished"
puts "Play with:"
puts "  trecs #{opts[:trecs_file]}"
