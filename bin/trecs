#!/usr/bin/env ruby

$:.unshift(File.expand_path("../../lib", __FILE__))

require "trollop"
require "timestamps"

module TRecs
  class Player
    attr_reader :file_name
    attr_accessor :current_time

    def initialize(opts={})
      @file_name    = opts[:file_name]
      @current_time = opts[:time]

      @ticks = if !opts[:time]
                 ticks
               else
                 Array(opts[:time].to_i)
               end
    end

    def tick(time=current_time)
      self.current_time = time
      frame = File.read(file_to_read)
      yield frame if block_given?
      frame
    end

    def timestamps
      return [] unless file_name
      @timestamps ||= IO.popen("ls #{File.dirname(file_name)}") do |output|
        output.each_line.map do |line|
          line[/(\d++)/, 1].to_i
        end.sort
      end
    end

    def ticks
      if @ticks
        return @ticks
      else
        @ticks = [0]
        curr   = 0
        while(curr < timestamps.last.to_i)
          curr += 100
          @ticks << curr
        end
        @ticks
      end
    end

    private
    attr_reader :file_name
    attr_accessor :current_time

    def testing?
      @testing
    end

    def file_to_read
      file_array = []
      file_array << File.dirname(file_name)
      file_array << "/#{time_at(current_time)}_"
      file_array << File.basename(file_name)
      file_to_read = file_array.join
    end

    def time_at(time)
      Timestamps.new(timestamps).time_at(time)
    end
  end
end

options = Trollop::options do
  opt :file_name,    "File to process",                   short: 'f', type: String
  opt :time,         "Frame at time",                     short: 't', type: String
  opt :current_time, "Returns the current playback time", short: 'c'

  opt :timestamps,   "Returns the list of existing frame timestamps"

  opt :testing,      "Ticks without waiting. Use this option only for testing purpuses"
end

file_name = options[:file_name]
if file_name
  if File.exist?(File.dirname(file_name))
    player = TRecs::Player.new(options)
    if options[:timestamps]
      p player.timestamps
    else
      player.ticks.each do |time|
        puts "\e[H\e[2J"
        puts player.tick(time)
        sleep(0.8) unless options[:testing]
      end
    end
  else
    puts "File #{file_name} does not exist."
  end
end
