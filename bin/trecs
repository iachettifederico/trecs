#!/usr/bin/env ruby
$:.unshift(File.expand_path("../../lib", __FILE__))

require "trollop"
require "timestamps"

module TRecs
  class Player
    attr_reader :file_name
    attr_reader :timestamps
    attr_reader :ticks


    attr_accessor :current_time

    def initialize(opts={})
      @file_name    = opts[:file_name]
      @current_time = opts[:time]

      @timestamps   = opts[:timestamps]
      @ticks = if opts[:ticks]
                 # Make ticks correctly
                 opts[:ticks].split(",").map(&:to_i)
               elsif opts[:time]
                 Array(opts[:time].to_i)
               else
                 [0]
               end
    end

    def tick
      if file_name
        if existent_project?
          ticks.each do |time|
            self.current_time = time
            puts "\e[H\e[2J"
            puts File.read(file_to_read)
          end
        else
          puts "File #{file_name} does not exist."
        end
      end
    end

    def timestamps
      IO.popen("ls #{File.dirname(file_name)}") do |output|
        output.each_line.map do |line|
          line[/(\d++)/, 1].to_i
        end.sort
      end
    end

    private

    def existent_project?
      File.exist?(File.dirname(@file_name))
    end

    def file_to_read
      file_array = []
      file_array << File.dirname(file_name)
      file_array << "/#{time_at(current_time)}_"
      file_array << File.basename(file_name)
      file_to_read = file_array.join
    end

    def time_at(time)
      Timestamps.new(timestamps).time_at(time)
    end

  end
end

options = Trollop::options do
  opt :file_name,    "File to process",                               short: 'f', type: String
  opt :time,         "Frame at time",                                 short: 't', type: String, default: "0"
  opt :current_time, "Returns the current playback time",             short: 'c'
  opt :quiet,        "Use minimal output",                            short: 'q' # not used
  opt :timestamps,   "Returns the list of existing frame timestamps"
  opt :ticks,        "External clock marks", type: String
end

player = TRecs::Player.new(options)
if options[:timestamps]
  p player.timestamps
else
  player.tick
end
