#!/usr/bin/env ruby

$:.unshift(File.expand_path("../../lib", __FILE__))
require "trecs"
require "player"
require "trollop"


opts = Trollop::options do
  version TRecs::VERSION

  opt :step, "Time in ms between frames", short: 's', default: 100
  opt :format, "File format", type: String, default: "json"
  opt :ticker, "Ticker", type: String, default: "clock"

  opt :from,  "Play from",     type: Integer, default: 0
  opt :to,    "Play to",       type: Integer, default: 0
  opt :speed, "Playinx speed", type: Float, default: 1.0

  opt :ticker_file, "File to watch", type: String, default: "/tmp/ticker"

  opt :audio, "Play with audio",                         type: String
end
opts[:trecs_file] = ARGV[0]

reader_file = "readers/#{opts[:format]}_reader"
require reader_file
reader_class = Kernel.const_get([
    "TRecs::",
    opts[:format].split(/[-_\s]/).map(&:capitalize),
    "Reader"
  ].join
  )


ticker_separator = '_' unless opts[:ticker] == ''
ticker_file = "tickers/#{opts[:ticker]}#{ticker_separator}ticker"
require ticker_file
ticker_class = Kernel.const_get([
    "TRecs::",
    opts[:ticker].split(/[-_\s]/).map(&:capitalize),
    "Ticker"
  ].join
  )

########## AUDIO ##########
def start_sound_player(file_name='sound.ogg')
  return unless File.exist?(file_name)
  # at_exit { system('stty echo') }
  STDOUT.puts "=> Starting sound player..."
  @sox_pid = fork do
    `play #{file_name} 2>&1`
  end
end

def stop_sound_player
  return unless File.exist?(file_name)
  STDOUT.puts "=> Stopping sound player..."
  Process.waitpid(@sox_pid)
end
######## END AUDIO ########


player_options = {
  reader: reader_class.new(opts),
  ticker: ticker_class.new(opts),
  step:   opts[:step],
}

player = TRecs::Player.new(player_options)

opts[:audio] && start_sound_player(opts[:audio])
player.play

puts "Finished"
puts "Replay with:"
puts "trecs #{opts[:trecs_file]}"
